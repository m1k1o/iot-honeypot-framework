/* tslint:disable */
/* eslint-disable */
/**
 * IoT Honeypot API
 * IoT Honeypot API 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xsedivy@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorMessage,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    ServiceId,
    ServiceIdFromJSON,
    ServiceIdToJSON,
    ServiceSpec,
    ServiceSpecFromJSON,
    ServiceSpecToJSON,
} from '../models';

export interface ServiceCreateRequest {
    serviceSpec: ServiceSpec;
}

export interface ServiceRemoveRequest {
    serviceId: string;
}

/**
 * 
 */
export class ServicesApi extends runtime.BaseAPI {

    /**
     * Create new service.
     */
    async serviceCreateRaw(requestParameters: ServiceCreateRequest): Promise<runtime.ApiResponse<ServiceId>> {
        if (requestParameters.serviceSpec === null || requestParameters.serviceSpec === undefined) {
            throw new runtime.RequiredError('serviceSpec','Required parameter requestParameters.serviceSpec was null or undefined when calling serviceCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/services`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceSpecToJSON(requestParameters.serviceSpec),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceIdFromJSON(jsonValue));
    }

    /**
     * Create new service.
     */
    async serviceCreate(serviceSpec: ServiceSpec): Promise<ServiceId> {
        const response = await this.serviceCreateRaw({ serviceSpec: serviceSpec });
        return await response.value();
    }

    /**
     * Remove service.
     */
    async serviceRemoveRaw(requestParameters: ServiceRemoveRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling serviceRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/services/{serviceId}`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove service.
     */
    async serviceRemove(serviceId: string): Promise<void> {
        await this.serviceRemoveRaw({ serviceId: serviceId });
    }

    /**
     * List of all services.
     */
    async servicesListRaw(): Promise<runtime.ApiResponse<Array<ServiceSpec>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceSpecFromJSON));
    }

    /**
     * List of all services.
     */
    async servicesList(): Promise<Array<ServiceSpec>> {
        const response = await this.servicesListRaw();
        return await response.value();
    }

}
