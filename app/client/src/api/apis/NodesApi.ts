/* tslint:disable */
/* eslint-disable */
/**
 * IoT Honeypot API
 * IoT Honeypot API 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xsedivy@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorMessage,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    NodeJoin,
    NodeJoinFromJSON,
    NodeJoinToJSON,
    NodeSpec,
    NodeSpecFromJSON,
    NodeSpecToJSON,
} from '../models';

export interface NodeRemoveRequest {
    nodeId: string;
}

/**
 * 
 */
export class NodesApi extends runtime.BaseAPI {

    /**
     * Join with new node.
     */
    async nodeJoinRaw(): Promise<runtime.ApiResponse<NodeJoin>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeJoinFromJSON(jsonValue));
    }

    /**
     * Join with new node.
     */
    async nodeJoin(): Promise<NodeJoin> {
        const response = await this.nodeJoinRaw();
        return await response.value();
    }

    /**
     * Remove node.
     */
    async nodeRemoveRaw(requestParameters: NodeRemoveRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.nodeId === null || requestParameters.nodeId === undefined) {
            throw new runtime.RequiredError('nodeId','Required parameter requestParameters.nodeId was null or undefined when calling nodeRemove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nodes/{nodeId}`.replace(`{${"nodeId"}}`, encodeURIComponent(String(requestParameters.nodeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove node.
     */
    async nodeRemove(nodeId: string): Promise<void> {
        await this.nodeRemoveRaw({ nodeId: nodeId });
    }

    /**
     * List of all nodes.
     */
    async nodesListRaw(): Promise<runtime.ApiResponse<Array<NodeSpec>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NodeSpecFromJSON));
    }

    /**
     * List of all nodes.
     */
    async nodesList(): Promise<Array<NodeSpec>> {
        const response = await this.nodesListRaw();
        return await response.value();
    }

}
