/* tslint:disable */
/* eslint-disable */
/**
 * IoT Honeypot API
 * IoT Honeypot API 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xsedivy@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    NodeStatus,
    NodeStatusFromJSON,
    NodeStatusFromJSONTyped,
    NodeStatusToJSON,
    Platform,
    PlatformFromJSON,
    PlatformFromJSONTyped,
    PlatformToJSON,
    Resources,
    ResourcesFromJSON,
    ResourcesFromJSONTyped,
    ResourcesToJSON,
} from './';

/**
 * 
 * @export
 * @interface NodeSpec
 */
export interface NodeSpec {
    /**
     * 
     * @type {string}
     * @memberof NodeSpec
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof NodeSpec
     */
    role?: NodeSpecRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof NodeSpec
     */
    hostname?: string;
    /**
     * 
     * @type {Platform}
     * @memberof NodeSpec
     */
    platform?: Platform;
    /**
     * 
     * @type {Resources}
     * @memberof NodeSpec
     */
    resources?: Resources;
    /**
     * 
     * @type {NodeStatus}
     * @memberof NodeSpec
     */
    status?: NodeStatus;
}

/**
* @export
* @enum {string}
*/
export enum NodeSpecRoleEnum {
    Worker = 'worker',
    Manager = 'manager'
}

export function NodeSpecFromJSON(json: any): NodeSpec {
    return NodeSpecFromJSONTyped(json, false);
}

export function NodeSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): NodeSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'role': !exists(json, 'role') ? undefined : json['role'],
        'hostname': !exists(json, 'hostname') ? undefined : json['hostname'],
        'platform': !exists(json, 'platform') ? undefined : PlatformFromJSON(json['platform']),
        'resources': !exists(json, 'resources') ? undefined : ResourcesFromJSON(json['resources']),
        'status': !exists(json, 'status') ? undefined : NodeStatusFromJSON(json['status']),
    };
}

export function NodeSpecToJSON(value?: NodeSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'role': value.role,
        'hostname': value.hostname,
        'platform': PlatformToJSON(value.platform),
        'resources': ResourcesToJSON(value.resources),
        'status': NodeStatusToJSON(value.status),
    };
}


