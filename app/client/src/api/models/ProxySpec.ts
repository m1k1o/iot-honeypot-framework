/* tslint:disable */
/* eslint-disable */
/**
 * IoT Honeypot API
 * IoT Honeypot API 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xsedivy@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PortConfig,
    PortConfigFromJSON,
    PortConfigFromJSONTyped,
    PortConfigToJSON,
} from './';

/**
 * 
 * @export
 * @interface ProxySpec
 */
export interface ProxySpec {
    /**
     * 
     * @type {string}
     * @memberof ProxySpec
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ProxySpec
     */
    service?: string;
    /**
     * 
     * @type {string}
     * @memberof ProxySpec
     */
    node?: string;
    /**
     * 
     * @type {Array<PortConfig>}
     * @memberof ProxySpec
     */
    ports?: Array<PortConfig>;
    /**
     * 
     * @type {boolean}
     * @memberof ProxySpec
     */
    running?: boolean;
}

export function ProxySpecFromJSON(json: any): ProxySpec {
    return ProxySpecFromJSONTyped(json, false);
}

export function ProxySpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProxySpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'service': !exists(json, 'service') ? undefined : json['service'],
        'node': !exists(json, 'node') ? undefined : json['node'],
        'ports': !exists(json, 'ports') ? undefined : ((json['ports'] as Array<any>).map(PortConfigFromJSON)),
        'running': !exists(json, 'running') ? undefined : json['running'],
    };
}

export function ProxySpecToJSON(value?: ProxySpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'service': value.service,
        'node': value.node,
        'ports': value.ports === undefined ? undefined : ((value.ports as Array<any>).map(PortConfigToJSON)),
        'running': value.running,
    };
}


